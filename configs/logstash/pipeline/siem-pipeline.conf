input {
  # Beats input for Filebeat
  beats {
    port => 5044
  }
  
  # Syslog input for firewall and system logs
  syslog {
    port => 5000
    tags => ["syslog", "firewall"]
  }
  
  # TCP input for application logs
  tcp {
    port => 5001
    codec => json_lines
    tags => ["tcp", "application"]
  }
}

filter {
  # Parse timestamps
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "MMM dd HH:mm:ss" ]
    target => "@timestamp"
  }
  
  # Firewall log parsing
  if "firewall" in [tags] {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:firewall_host} %{WORD:action} %{IP:src_ip}:%{INT:src_port} -> %{IP:dst_ip}:%{INT:dst_port} %{WORD:protocol}( %{GREEDYDATA:extra_info})?"
      }
    }
    
    mutate {
      add_field => { "log_type" => "firewall" }
      add_field => { "event_category" => "network" }
    }
    
    # GeoIP enrichment for source IP
    geoip {
      source => "src_ip"
      target => "src_geoip"
    }
    
    geoip {
      source => "dst_ip" 
      target => "dst_geoip"
    }
  }
  
  # Authentication log parsing for Ubuntu format
  if "auth" in [tags] or [log][file][path] =~ /auth/ {
    # Ubuntu auth.log format: 2025-09-12T04:35:32.057672+05:30 hostname sudo: user : TTY=pts/2 ; PWD=/path ; USER=root ; COMMAND=/bin/cmd
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service}(\[%{POSINT:pid}\])?: %{WORD:auth_result} for %{USERNAME:user} from %{IP:src_ip}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service}(\[%{POSINT:pid}\])?: %{USERNAME:user} : TTY=%{TTY:tty} ; PWD=%{PATH:pwd} ; USER=%{USERNAME:target_user} ; COMMAND=%{GREEDYDATA:command}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service}(\[%{POSINT:pid}\])?: pam_unix\(%{WORD:service}:%{WORD:pam_type}\): %{WORD:auth_result} for %{USERNAME:user}",
          "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service}(\[%{POSINT:pid}\])?: %{GREEDYDATA:event_details}"
        ]
      }
    }
    
    mutate {
      add_field => { "log_type" => "authentication" }
      add_field => { "event_category" => "authentication" }
    }
    
    # Enhanced failed login detection
    if [auth_result] =~ /(?i)(failed|failure|invalid|denied)/ {
      mutate {
        add_field => { "security_alert" => "failed_login" }
        add_field => { "severity" => "medium" }
      }
    }
    
    # Sudo command monitoring
    if [service] == "sudo" and [command] {
      mutate {
        add_field => { "security_alert" => "sudo_command" }
        add_field => { "severity" => "low" }
      }
    }
    
    # Root access attempts
    if [target_user] == "root" {
      mutate {
        add_field => { "security_alert" => "root_access" }
        add_field => { "severity" => "high" }
      }
    }
    
    # GeoIP for authentication attempts
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "src_geoip"
      }
    }
  }
  
  # System log parsing for Ubuntu
  if "syslog" in [tags] or "system" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:service}(\[%{POSINT:pid}\])?: %{GREEDYDATA:event_details}"
      }
    }
    
    mutate {
      add_field => { "log_type" => "system" }
      add_field => { "event_category" => "system" }
    }
    
    # System security events
    if [message] =~ /(?i)(error|warning|failed|denied|blocked|suspicious)/ {
      mutate {
        add_field => { "security_alert" => "system_event" }
        add_field => { "severity" => "low" }
      }
    }
  }
  
  # Kernel log parsing for security events
  if "kernel" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} kernel: (\[%{BASE10NUM:kernel_time}\] )?%{GREEDYDATA:kernel_message}"
      }
    }
    
    mutate {
      add_field => { "log_type" => "kernel" }
      add_field => { "event_category" => "kernel" }
    }
    
    # Kernel security events
    if [kernel_message] =~ /(?i)(iptables|denied|blocked|dropped|suspicious|intrusion)/ {
      mutate {
        add_field => { "security_alert" => "kernel_security" }
        add_field => { "severity" => "medium" }
      }
    }
  }
  
  # Add common enrichment fields
  mutate {
    add_field => { "[@metadata][index]" => "siem-logs-%{+YYYY.MM.dd}" }
    add_field => { "ingestion_timestamp" => "%{@timestamp}" }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input" ]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}"
  }
  
  # Debug output to stdout
  stdout {
    codec => rubydebug
  }
}
